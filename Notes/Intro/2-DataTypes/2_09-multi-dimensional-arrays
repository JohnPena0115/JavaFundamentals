The most basic type of array in Java is a one dimensional array.

A multi-dimensional array is an extension of that concept. A
multi-dimensional array is sometimes referred to as an array
of arrays ...

Whereas a one dimensional array could be seen as storage for a
list, a multi-dimensional array could be seen as storage for
a list of lists.

Another way to view the difference between the two is to think of
a one dimensional array as consisting of one row with many columns
and to think of a multi-dimensional array as consisting of many rows
with many columns.

Declaring and Initializing a 2D Array
-------------------------------------

A 2D array is the most basic type of multi-dimensional array.
Below is one way of declaring a 2D integer array ...

    int[][] numbers = new int[x][y];

You would need to replace "x" with the desired number of rows
you would want the 2D array to have and "y" with the desired
number of columns

You could also declare and initialize a 2D array by providing
array literals ...

    int[][] numbers = { {6, 13, 20} , {7, 15, 23} } ;

Accessing the Elements of a 2D Array
------------------------------------

To access any individual element of a 2D array you would need to
provide 2 indexes; the first index would refer to the row the element
occupied in the array whereas the second index would refer to the
column the element occupied in the array.

    numbers[row #][columns #]

Keep in mind that the rows and columns of an array are 0-based indexed
so the first row and column of numbers would be

    numbers[0][0]

Displaying the Contents of a 2D Array
-------------------------------------

Remember, if we wanted to display the contents of a
ond dimensional array, writing out

    System.out.printlin(chars)

would not suffice. We would need to write out

    System.our.println(Arrays.toString(chars))

Unfortunately, the toString() Arrays method does not work on
2D arrays. Let's say that charLists is a 2D array. Executing
the following line of code

    System.out.println(Arrays.toString(charLists))

would give us an output that was a string representation of
the address of charLists on the heap. If we wanted to see the
actual content of charLists we would need to write

    System.out.println(Arrays.deepToString(charLists))

The deepToString() method is used for displaying the contents
of a multidimensional array

