Arrays are used to store lists of items
    +list of numbers
    +list of people
    +list of messages
    +list of instances of a class

Arrays are reference types so the following is one
way of declaring an array:

    typeofArray[] identifier = new typeofArray[A];

We would set the size of the array were A is ...

For example, we could declare an array of integers,
label it "numbers" and initialize the array size
to 5 by writing the following line of code:

    int[] numbers = new int[5];

However, like strings, arrays do not necessarily have
to be declared with the "new" operator. You can also declare
an array with an array literal:

    int[] numbers = {2,3,5,7,11}


In Java, one thing to keep in mind about arrays is that they
have a fixed size. So, once we create an array we cannot add
or remove items from that array.


Displaying the Contents of an Array
-----------------------------------

Let's see we have the following lines:

    int[] numbers = new int[5];
    numbers[0] = 1;
    numbers[1] = 2;
    System.out.println(numbers);

We are not going to get

    [1, 2, 0, 0, 0]

We are going to get the forwarding address (which is stored in the stack)
for the array object(which is stored in the heap). Remember, an array is a
reference type and a reference type only stores the reference, which you can
think of as a heap memory address, for that object.

If you wanted to actually see the contents of numbers you would have to
write the following lines:

    int[] numbers = new int[5];
    numbers[0]= 1;
    numbers[1] = 2;
    System.out.println(Arrays.toString(numbers));

Any array in Java will be an instance(object) of the Array class. As such,
any array in Java has access to the Array class methods. One of those methods,
toString(), returns a string representation of the contents of an array.

Side Topics
-----------
Exceptions => exceptions are Java's way of reporting errors