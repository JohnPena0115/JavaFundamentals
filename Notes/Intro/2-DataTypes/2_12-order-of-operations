If a mathematical expression does not have an increment or
decrement operator, the order of operations is the same
as the mathematical order of operations =>

()        => parentheses
Math.pow  => exponents
*, /      => multiplication, division
+, -      => addition, subtraction


However, if a mathematical expression includes the increment or
decrement operator than the order of operations changes to

()
++, --
Math.pow
*, /
+, -

How Java Evaluates the Decrement and Increment Operators
When Combined with Other Mathematical Operators
---------------------------------------------------------

By themselves, the prefix increment operator (++x) and the postfix
increment operator (x++) evaluate to the same thing => x = x + 1.
However, if they are on the right hand side of an assignment statement,
or if they are used in a mathematical expression, the prefix and
postfix increment operators do get evaluated differently.

Let's say you encountered the following lines of code ...

        int x = 2;              //Line 1
        int y = x++ * ++x;      //Line 2

        System.out.println(y);
        System.out.println(x);


When Java begins evaluating Line 2, the first thing it will do is evaluate x++. Since
x++ has a postfix operator, Java will evaluate X at its current value, which at that
point is 2 and then increment the value of X by 1. Before it evaluates the prefix ++x
we would have

    int y = 2 * ++x (where x now equals 3)


When Java encounters ++x, because X has a prefix operator, Java will first increment the
value of X by 1 and then evaluate X at its current values(4). At this point we would have

    int y = 2 * 4 (where x equals 4)




